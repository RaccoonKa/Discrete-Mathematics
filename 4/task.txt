**_Вариант 2. Задание:_**  

**0. Подобрать англоязычный текст длиной** примерно три страницы (около 12000 символов), при этом для удобства все буквы переделать в строчные, оставив не более 32 различных символов.  

**1. Провести статистический анализ по частоте** букв и по частоте пар букв.  

**2. На основе этих статистик построить коды** Хаффмана, закодировать текст этими кодами, сравнить количество бит закодированного текста с равномерными (5-ти битовыми) кодами, по формуле Шенона найти количество информации и сравнить с кодами Хаффмана.  

**3. Закодировать этот же текст по алгоритму LZW,** сравнить количество бит закодированного текста с равномерными кодами и кодами Хаффмана.  

**_Описание алгоритма (Lempel-Ziv-Welch - LZW)_**  
_Предположим, что у нас имеется словарь, хранящий строки текста и содержащий примерно от 2000 до 8000 пронумерованных гнезд. Запишем в первые гнезда строки, состоящие из одного символа, номер которого равен номеру гнезда. Алгоритм просматривает входной поток, разбивая его на подстроки и добавляя новые гнезда в конец словаря. Прочитаем несколько символов в строку s и найдем в словаре строку t - самый длинный префикс s. Пусть он найден в гнезде с номером n. Выведем число n в выходной поток, переместим указатель входного потока на length(t) символов вперед и добавим в словарь новое гнездо, содержащее строку t+c, где c – очередной символ на входе (сразу после t). Алгоритм преобразует поток символов на входе в поток индексов ячеек словаря на выходе. При реализации алгоритма следует учесть, что любое гнездо словаря, кроме самых первых, хранит копию некоторого другого гнезда, к которой в конец приписан один символ. Вследствие этого можно обойтись простой спичечной структурой с одной связью.